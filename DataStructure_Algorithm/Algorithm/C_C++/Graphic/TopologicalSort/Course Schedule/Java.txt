public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[][] matrix = new int[numCourses][numCourses];
		int[] indegree = new int[numCourses];
		
		for (int i=0; i < prerequisites.length; i++) {
			int ready = prerequisites[i][0];
			int pre = prerequisites[i][1];
			if (matrix[pre][ready] == 0)
				indegree[ready]++;
			matrix[pre][ready] = 1;
		}
		int count = 0;
		Queue<Integer> que = new LinkedList();
		for (int i=0;i<numCourses;i++) {
			if (indegree[i] == 0)
				que.offer(i);
		}
		while (!que.isEmpty()) {
			int course_id = que.poll();
			count++;
			for (int i=0;i<numCourses;i++) {
				if (matrix[course_id][i] != 0) {
					if (--indegree[i] == 0)
						que.offer(i);
				}
			}
		}
		return count == numCourses;
    }
}