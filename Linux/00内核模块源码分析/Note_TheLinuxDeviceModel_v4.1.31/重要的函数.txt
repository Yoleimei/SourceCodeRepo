01. lib/kobject.c
	=> void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
	=> int kobject_set_name(struct kobject *kobj, const char *fmt, ...);
	=> struct kobject *kobject_create(void);
	=> struct kobject *kobject_get(struct kobject *kobj);
	=> void kobject_put(struct kobject *kobj);
	=> int kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...);
	=> struct kobject *kobject_create_and_add(const char *name, struct kobject *parent);
	=> void kobject_del(struct kobject *kobj);
	=> void kset_init(struct kset *k);
	=> static struct kset *kset_create(const char *name, const struct kset_uevent_ops *uevent_ops, struct kobject *parent_kobj);
	=> struct kset *kset_create_and_add(const char *name, const struct kset_uevent_ops *uevent_ops, struct kobject *parent_kobj);
	=> int kset_register(struct kset *k);
	=> void kset_unregister(struct kset *k);
	=> char *kobject_get_path(struct kobject *kobj, gfp_t gfp_mask);
02. include/linux/kobject.h
	=> static inline struct kobj_type *get_ktype(struct kobject *kobj);
02. include/linux/kref.h
	=> static inline void kref_init(struct kref *kref);
	=> static inline void kref_get(struct kref *kref);
	=> static inline int kref_put(struct kref *kref, void (*release)(struct kref *kref));
03. include/linux/sysfs.h
	=> static inline int __must_check sysfs_create_file(struct kobject *kobj, const struct attribute *attr);
	=> static inline int sysfs_create_link(struct kobject *kobj, struct kobject *target, const char *name);
	=> static inline int sysfs_create_bin_file(struct kobject *kobj, const struct bin_attribute *attr);
	=> static inline void sysfs_remove_file(struct kobject *kobj, const struct attribute *attr);
	=> static inline void sysfs_remove_link(struct kobject *kobj, const char *name);
	=> static inline void sysfs_remove_bin_file(struct kobject *kobj, const struct bin_attribute *attr);
04. lib/kobject_uevent.c
	=> int kobject_uevent(struct kobject *kobj, enum kobject_action action);
	=> int kobject_uevent_env(struct kobject *kobj, enum kobject_action action, char *envp_ext[]);
	=> int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
05. drivers/base/bus.c
	=> int bus_register(struct bus_type *bus);
	=> void bus_unregister(struct bus_type *bus);
	=> int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data, int (*fn)(struct device *, void *));
	=> int bus_for_each_drv(struct bus_type *bus, struct device_driver *start, void *data, int (*fn)(struct device_driver *, void *));
	=> int bus_create_file(struct bus_type *bus, struct bus_attribute *attr);
	=> void bus_remove_file(struct bus_type *bus, struct bus_attribute *attr);
06. drivers/base/core.c
	=> int device_register(struct device *dev);
	=> void device_unregister(struct device *dev);
	=> int device_create_file(struct device *dev, const struct device_attribute *attr);
	=> void device_remove_file(struct device *dev, const struct device_attribute *attr);
07. drivers/base/driver.c
	=> int driver_register(struct device_driver *drv);
	=> void driver_unregister(struct device_driver *drv);
	=> int driver_create_file(struct device_driver *drv, const struct driver_attribute *attr);
	=> void driver_remove_file(struct device_driver *drv, const struct driver_attribute *attr);
08. drivers/base/class.c
	=> int __class_register(struct class *cls, struct lock_class_key *key);
	=> void class_unregister(struct class *cls);
	=> int class_create_file_ns(struct class *cls, const struct class_attribute *attr, const void *ns);
	=> void class_remove_file_ns(struct class *cls, const struct class_attribute *attr, const void *ns);
	=> int class_interface_register(struct class_interface *class_intf);
	=> void class_interface_unregister(struct class_interface *class_intf);
09. 
